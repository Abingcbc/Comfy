package com.kha.cbc.comfy.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.kha.cbc.comfy.entity.GDPersonalCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GDPERSONAL_CARD".
*/
public class GDPersonalCardDao extends AbstractDao<GDPersonalCard, String> {

    public static final String TABLENAME = "GDPERSONAL_CARD";

    /**
     * Properties of entity GDPersonalCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property TaskId = new Property(3, String.class, "taskId", false, "TASK_ID");
        public final static Property RemindDate = new Property(4, String.class, "remindDate", false, "REMIND_DATE");
        public final static Property IsRemind = new Property(5, boolean.class, "isRemind", false, "IS_REMIND");
    }

    private Query<GDPersonalCard> gDPersonalTask_PersonalCardListQuery;

    public GDPersonalCardDao(DaoConfig config) {
        super(config);
    }
    
    public GDPersonalCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GDPERSONAL_CARD\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"TASK_ID\" TEXT," + // 3: taskId
                "\"REMIND_DATE\" TEXT," + // 4: remindDate
                "\"IS_REMIND\" INTEGER NOT NULL );"); // 5: isRemind
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GDPERSONAL_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GDPersonalCard entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(4, taskId);
        }
 
        String remindDate = entity.getRemindDate();
        if (remindDate != null) {
            stmt.bindString(5, remindDate);
        }
        stmt.bindLong(6, entity.getIsRemind() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GDPersonalCard entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(4, taskId);
        }
 
        String remindDate = entity.getRemindDate();
        if (remindDate != null) {
            stmt.bindString(5, remindDate);
        }
        stmt.bindLong(6, entity.getIsRemind() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GDPersonalCard readEntity(Cursor cursor, int offset) {
        GDPersonalCard entity = new GDPersonalCard( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taskId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remindDate
            cursor.getShort(offset + 5) != 0 // isRemind
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GDPersonalCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemindDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsRemind(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(GDPersonalCard entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(GDPersonalCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GDPersonalCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "personalCardList" to-many relationship of GDPersonalTask. */
    public List<GDPersonalCard> _queryGDPersonalTask_PersonalCardList(String taskId) {
        synchronized (this) {
            if (gDPersonalTask_PersonalCardListQuery == null) {
                QueryBuilder<GDPersonalCard> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                gDPersonalTask_PersonalCardListQuery = queryBuilder.build();
            }
        }
        Query<GDPersonalCard> query = gDPersonalTask_PersonalCardListQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

}
